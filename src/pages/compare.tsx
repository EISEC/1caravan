import Menu from "@/components/header/menu";
import {clearComp} from "@/store/slice/compare";
import Footer from "@/components/footer/footer";
import {useAppDispatch, useAppSelector} from "@/store/store";
import React, {useEffect, useState} from "react";
import axios from "axios";
import Link from "next/link";
import TabelComapareFunction from "@/components/tabelComapareFunction";
import Head from "next/head";

const Compare = () => {
    const dispatch = useAppDispatch()
    const {compareList} = useAppSelector(state => state.compare)
    const [caravans, setCaravans] = useState<any[]>([])
    const [isLoading, setIsLoading] = useState(false)
    const [hasError, setHasError] = useState(false)
    const [errorMessage, setErrorMessage] = useState('')

    function loadingData(i: any) {
        if (i === 0) {
            return (
                <div className="text-center py-16">
                    <div className="max-w-md mx-auto">
                        <div className="text-6xl mb-4">üõí</div>
                        <h3 className="text-2xl font-bold text-gray-800 mb-4">–°–ø–∏—Å–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—É—Å—Ç</h3>
                        <p className="text-gray-600 mb-6">
                            –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä–∞–≤–∞–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä—è–¥–æ–º
                        </p>
                        <Link 
                            href="/catalog"
                            className="inline-block bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium"
                        >
                            –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
                        </Link>
                    </div>
                </div>
            )
        }
        if (i > 0) {
            return (
                <div className="text-center py-16">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                    <div className="text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...</div>
                </div>
            )
        }
    }

    function renderErrorState() {
        return (
            <div className="text-center py-16">
                <div className="max-w-lg mx-auto">
                    <div className="text-6xl mb-4">‚ö†Ô∏è</div>
                    <h3 className="text-2xl font-bold text-red-600 mb-4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</h3>
                    <p className="text-gray-600 mb-6">
                        {errorMessage || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Ä–∞–≤–∞–Ω—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã.'}
                    </p>
                    <div className="flex flex-col sm:flex-row gap-4 justify-center">
                        <button 
                            onClick={() => {
                                setHasError(false)
                                setErrorMessage('')
                                dispatch(clearComp())
                            }}
                            className="bg-red-500 text-white px-6 py-3 rounded-lg hover:bg-red-600 transition-colors font-medium flex items-center justify-center gap-2"
                        >
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                            –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
                        </button>
                        <button 
                            onClick={() => {
                                setHasError(false)
                                setErrorMessage('')
                                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                                const loadCaravans = async () => {
                                    if (compareList.length === 0) {
                                        setCaravans([]);
                                        return;
                                    }

                                    setIsLoading(true);
                                    try {
                                        const promises = compareList.map(async (item) => {
                                            const response = await axios.get(`https://1caravan.ru/wp-json/api/v2/doma/${item.slug}`);
                                            return response.data[0];
                                        });

                                        const caravansData = await Promise.all(promises);
                                        setCaravans(caravansData);
                                        setHasError(false);
                                    } catch (error) {
                                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', error);
                                        setHasError(true);
                                        setErrorMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                                    } finally {
                                        setIsLoading(false);
                                    }
                                };
                                loadCaravans();
                            }}
                            className="bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-600 transition-colors font-medium flex items-center justify-center gap-2"
                        >
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                            </svg>
                            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                    </div>
                </div>
            </div>
        )
    }

    useEffect(() => {
        const loadCaravans = async () => {
            if (compareList.length === 0) {
                setCaravans([]);
                setHasError(false);
                setErrorMessage('');
                return;
            }

            setIsLoading(true);
            setHasError(false);
            setErrorMessage('');
            
            try {
                const promises = compareList.map(async (item) => {
                    const response = await axios.get(`https://1caravan.ru/wp-json/api/v2/doma/${item.slug}`);
                    return response.data[0];
                });

                const caravansData = await Promise.all(promises);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                const validData = caravansData.filter(item => item && item.id);
                
                if (validData.length !== compareList.length) {
                    setHasError(true);
                    setErrorMessage(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${validData.length} –∏–∑ ${compareList.length} –∫–∞—Ä–∞–≤–∞–Ω–æ–≤. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –º–æ–≥–ª–∏ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã.`);
                    setCaravans(validData);
                } else {
                    setCaravans(caravansData);
                }
            } catch (error: any) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', error);
                setHasError(true);
                
                if (error.response?.status === 404) {
                    setErrorMessage('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Ä–∞–≤–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.');
                } else if (error.response?.status >= 500) {
                    setErrorMessage('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                } else if (error.code === 'NETWORK_ERROR' || !navigator.onLine) {
                    setErrorMessage('–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
                } else {
                    setErrorMessage('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.');
                }
                
                setCaravans([]);
            } finally {
                setIsLoading(false);
            }
        };

        loadCaravans();
    }, [compareList])

    return (
        <>
            <Head>
                <title>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—Ä–∞–≤–∞–Ω–æ–≤ | –ü–µ—Ä–≤—ã–π –ö–∞—Ä–∞–≤–∞–Ω</title>
                <meta name="description" content="–°—Ä–∞–≤–Ω–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä–∞–≤–∞–Ω–æ–≤ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è." />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            
            <Menu/>
            <main className="mt-28 min-h-screen bg-gray-50">
                <div className="container mx-auto py-8 px-4">
                    {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                    <div className="mb-8">
                        <h1 className="text-4xl font-bold text-gray-900 mb-2">–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞—Ä–∞–≤–∞–Ω–æ–≤</h1>
                        <p className="text-gray-600">
                            –°—Ä–∞–≤–Ω–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä–∞–≤–∞–Ω–æ–≤ –∏ –Ω–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                        </p>
                    </div>

                    {/* –°—á–µ—Ç—á–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
                    {compareList.length > 0 && (
                        <div className="bg-white rounded-lg shadow-sm p-4 mb-6">
                            <div className="flex items-center justify-between">
                                <span className="text-gray-700">
                                    –í—ã–±—Ä–∞–Ω–Ω–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: <span className="font-semibold text-blue-600">{compareList.length}</span> –∫–∞—Ä–∞–≤–∞–Ω–æ–≤
                                </span>
                                <button 
                                    onClick={() => dispatch(clearComp())}
                                    className="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors flex items-center gap-2"
                                >
                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                    </svg>
                                    –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                                </button>
                            </div>
                        </div>
                    )}

                    {/* –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è */}
                    <div className="bg-white rounded-lg shadow-sm">
                        {hasError ? renderErrorState() :
                         isLoading ? loadingData(compareList.length) : 
                         !caravans.length ? loadingData(compareList.length) : 
                         <TabelComapareFunction arr={caravans}/>}
                    </div>
                </div>
            </main>
            <Footer/>
        </>
    );
};

export default Compare;